

*************************************************   Instalación de MariaDB, Apache, PHP y otras dependencias de MISP ******************************************************  


- INSTALAR MARIADB CON EL SIGUIENTE COMANDO:

# apt-get install mariadb-client mariadb-server -qy

-------------------------------------------------------------------------
- HACER EL HARDENING DE MARIADB CON EL SIGUIENTE COMANDO:

# mysql_secure_installation


- A CONTINUACIÓN SE MUESTRAN LAS CONFIGURACIONES QUE DEBERÁN SELECCIONAR UNA VEZ QUE SE ESTÉ INSTALANDO MARIADB.


NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY!

In order to log into MariaDB to secure it, we'll need the current
password for the root user. If you've just installed MariaDB, and
you haven't set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none):  (pressionar enter, ainda não existe senha)

OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

Set root password? [Y/n] Y

New password: 
Re-enter new password: 
Password updated successfully!
Reloading privilege tables..
... Success!

** Sugestão para a senha do root:
# openssl rand -base64 15

By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them. This is intended only for testing, and to make the installation
go a bit smoother. You should remove them before moving into a
production environment.

Remove anonymous users? [Y/n] Y

... Success!

Normally, root should only be allowed to connect from 'localhost'. This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y/n]  Y

... Success!

By default, MariaDB comes with a database named 'test' that anyone can
access. This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y/n] Y

- Dropping test database...
... Success!
- Removing privileges on test database...
... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y/n] Y

... Success!

Cleaning up...

All done! If you've completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB

-------------------------------------------------------------------------

- CHEQUEAR QUE MARIADB ESTA CORRIENDO:

# systemctl status mariadb

● mariadb.service - MariaDB 10.1.44 database server
Loaded: loaded (/lib/systemd/system/mariadb.service; enabled; vendor preset: enabled)
Active: active (running) since Mon 2020-08-10 13:01:46 UTC; 9min ago
Docs: man:mysqld(8)
https://mariadb.com/kb/en/library/systemd/
Main PID: 27147 (mysqld)
Status: "Taking your SQL requests now..."
Tasks: 27 (limit: 1107)
CGroup: /system.slice/mariadb.service
└─27147 /usr/sbin/mysqld

Aug 10 13:01:46 servername /etc/mysql/debian-start[27184]: information_schema
Aug 10 13:01:46 servername /etc/mysql/debian-start[27184]: mysql
Aug 10 13:01:46 servername /etc/mysql/debian-start[27184]: performance_schema
Aug 10 13:01:46 servername /etc/mysql/debian-start[27184]: Phase 6/7: Checking and upgrading tables
Aug 10 13:01:46 servername /etc/mysql/debian-start[27184]: Processing databases
Aug 10 13:01:46 servername /etc/mysql/debian-start[27184]: information_schema
Aug 10 13:01:46 servername /etc/mysql/debian-start[27184]: performance_schema
Aug 10 13:01:46 servername /etc/mysql/debian-start[27184]: Phase 7/7: Running 'FLUSH PRIVILEGES'
Aug 10 13:01:46 servername /etc/mysql/debian-start[27184]: OK
Aug 10 13:01:47 servername /etc/mysql/debian-start[27246]: Triggering myisam-recover for all MyISAM tables and aria-recover for all Aria tables
-------------------------------------------------------------------------

INSTALAR EL SERVIDOR DE APACHE.

-Ingrese el siguiente comando para instalar:

# apt-get install apache2 apache2-doc apache2-utils -qy



- Edite el archivo /etc/apache2/sites-available/000-default.conf, elimine el comentario de la línea ServerName y complete su FQDN. 
- Vuelva a cargar el archivo de configuración de apache con el comando:

# service apache2 reload



-Instalar y configurar certbot (opcional si su organización tiene su propio certificado):
-Agregue el repositorio de Certbot con el comando (solo se requiere en Ubuntu 18.04 LTS):

 # add-apt-repository ppa:certbot/certbot



-Instalar el paquete certbot con el comando:

# apt-get install certbot python3-certbot-apache -qy



-Crear el certificado con el comando:

# certbot certonly --apache


INSTALACIÓN DE PHP 7.4   

-Agregar el repositorio de PHP para garantizar la instalación de PHP 7.4 (necesario en Ubuntu 18.04):

# add-apt-repository ppa:ondrej/php


- Instalar PHP y los módulos utilizados por MISP:

# apt-get install libapache2-mod-php7.4 php php-cli php-dev \
php-json php-xml php-mysql php7.4-opcache php-readline \
php-mbstring php-redis php-gnupg php-gd -qy


- Configurar PHP editando el archivo /etc/php/7.4/apache2/php.ini con los siguientes valores:

upload_max_filesize=50M
post_max_size=50M
max_execution_time=300
memory_limit=2048M


- Verificar los campos expose_php y display_errors del archivo anteriormente mencionado:

expose_php=Off
display_errors=Off


- Luego de realizar las alteraciones, recargar apache:

# service apache2 reload

- Testear php creando el archivo /var/www/html/phpinfo.php con el siguiente contenido:

<?php
  phpinfo()
?>


- Acceder a http://<su FQDN>/phpinfo.php y verificar que php está funcionando


- Luego del testeo, remover el archivo phpinfo.php:

# rm /var/www/html/phpinfo.php






******************************************************    Instalación de MISP ******************************************************  

Esta sesión cubre la instalación de MISP, la creación de la base de datos y la configuración del sitio web.

- Instalar las dependencias de MISP:

# apt-get install curl gcc git gpg-agent make python python3 openssl \
redis-server sudo vim zip unzip virtualenv libfuzzy-dev sqlite3 moreutils \
python3-dev python3-pip libxml2-dev libxslt1-dev zlib1g-dev python-setuptools -qy


- Crear las variables de ambiente con los comandos:

# export PATH_TO_MISP=/var/www/MISP
# export WWW_USER=www-data
# export SUDO_WWW='sudo -H -u www-data'
# export CAKE="/var/www/MISP/app/Console/cake"


- Verifique si las variables fueron creadas con el comando:

# mkdir ${PATH_TO_MISP}
# chown $WWW_USER:$WWW_USER ${PATH_TO_MISP}



-Descargue el código MISP con los comandos:

# cd ${PATH_TO_MISP}
# $SUDO_WWW git clone https://github.com/MISP/MISP.git ${PATH_TO_MISP}
# $SUDO_WWW git submodule update --init --recursive



- Configuración para que GIT ignore la diferencia en los permisos en los directorios:

# $SUDO_WWW git submodule foreach --recursive git config core.filemode false
# $SUDO_WWW git config core.filemode false



-Crea el virtualenv de python:

# $SUDO_WWW virtualenv -p python3 ${PATH_TO_MISP}/venv



- Cree el directorio de caché de pip:

# mkdir /var/www/.cache/ 
# chown $WWW_USER:$WWW_USER /var/www/.cache



-Descargue e instale los componentes de MISP:

# cd ${PATH_TO_MISP}/app/files/scripts
# $SUDO_WWW git clone https://github.com/CybOXProject/python-cybox.git
# $SUDO_WWW git clone https://github.com/STIXProject/python-stix.git
# $SUDO_WWW git clone https://github.com/MAECProject/python-maec.git

# $SUDO_WWW git clone https://github.com/CybOXProject/mixbox.git

# cd ${PATH_TO_MISP}/app/files/scripts/mixbox
# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install .

# cd ${PATH_TO_MISP}/app/files/scripts/python-cybox
# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install .

# cd ${PATH_TO_MISP}/app/files/scripts/python-stix
# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install .

# cd $PATH_TO_MISP/app/files/scripts/python-maec
# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install .

# cd ${PATH_TO_MISP}/cti-python-stix2
# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install .



-Instale PyMISP con los comandos:

# cd ${PATH_TO_MISP}/PyMISP
# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install .



-Instale otros paquetes MISP con los comandos:

# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install git+https://github.com/kbandla/pydeep.git
# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install lief
# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install zmq redis
# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install python-magic
# $SUDO_WWW ${PATH_TO_MISP}/venv/bin/pip install plyara



--- Instalar CakePHP ---

-Instalar CakePHP con los siguientes comandos:

# cd ${PATH_TO_MISP}/app
# mkdir /var/www/.composer ; sudo chown $WWW_USER:$WWW_USER /var/www/.composer
# $SUDO_WWW php composer.phar install




-Habilitar los módulos para el funcionamento de Cake:
# phpenmod redis
# phpenmod gnupg



-Habilitar usuarios de Cake:

# $SUDO_WWW cp -fa ${PATH_TO_MISP}/INSTALL/setup/config.php ${PATH_TO_MISP}/app/Plugin/CakeResque/Config/config.php




---crear la base de datos MISP ---

-Accede a mariadb como root:
# mysql -u root -p



-Ingrese los siguientes comandos para crear la base de datos MISP y el usuario que tendrá acceso al banco:


CREATE DATABASE misp;
CREATE USER 'misp_user'@'localhost' IDENTIFIED BY '<MISP_USER-PASSWORD>';
GRANT USAGE ON *.* to misp_user@localhost;
GRANT ALL PRIVILEGES on misp.* to 'misp_user'@'localhost';
FLUSH PRIVILEGES;
exit



-Sugerencia para la contraseña de misp_user:
# openssl rand -base64 15



-Importe el esquema de la base de datos MISP:
# ${SUDO_WWW} cat ${PATH_TO_MISP}/INSTALL/MYSQL.sql | mysql -u misp_user misp -p



---Permisos correctos---

Para asegurarse de que ningún permiso se haya configurado incorrectamente, corrija todos los permisos en el directorio de instalación de MISP con los comandos:

# chown -R ${WWW_USER}:${WWW_USER} ${PATH_TO_MISP}
# chmod -R 750 ${PATH_TO_MISP}
# chmod -R g+ws ${PATH_TO_MISP}/app/tmp
# chmod -R g+ws ${PATH_TO_MISP}/app/files
# chmod -R g+ws $PATH_TO_MISP/app/files/scripts/tmp







